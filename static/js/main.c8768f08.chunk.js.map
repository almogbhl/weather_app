{"version":3,"sources":["serviceWorker.js","containers/Location/Location.reducer.js","App/App.reducer.js","store/root.reducer.js","containers/Location/Location.constants.js","App/App.constants.js","store/store.js","middleware/local.saver.js","styles/global.styles.js","components/Header/Header.js","App/App.actions.js","store/selectors.js","utils/config/api.js","utils/helpers/title_case.js","containers/Location/Location.actions.js","components/SearchBar/SearchBar.js","containers/SearchBar/SearchBarContainer.js","components/Card/Card.js","containers/Card/CardContainer.js","containers/Card/Card.actions.js","components/List/List.js","components/Location/Location.js","containers/Location/LocationContainer.js","components/HomePage/HomePage.js","components/Favorites/Favorites.js","routes/Routes.js","styles/theme.js","App/App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","geoLocation","data","isLoading","error","autoComplete","currentWeather","forecast","favorites","theme","rootReducer","combineReducers","state","action","produce","draft","type","payload","id","newFavList","app","middleware","thunk","store","next","localStorage","setItem","JSON","stringify","getState","preloadedState","parse","getItem","createStore","rootReducers","applyMiddleware","GlobalStyle","createGlobalStyle","body","text","connect","dispatch","do_changeTheme","S","Header","Title","ButtonsBox","to","Home","style","color","deepPurple","fontSize","marginLeft","FavoriteSharp","ColorLens","onClick","cursor","styled","header","h1","div","selectorLoadingData","createSelector","selectorReceivingData","selectorFetchingError","selectorFavorites","selectorAppTheme","api","cors","lat_lon","process","autocomplete","searchValue","current","locationKey","title_case","str","toLowerCase","replace","L","toUpperCase","getWeatherData","query","fetch_details","getFetchingDetails","FETCHING","axios","get","API_URL","then","response","getSortedData","FETCHED","catch","ERROR","msg","message","helper","Key","map","item","LocalizedName","cityName","iconID","WeatherIcon","weatherIconID","toString","length","Link","slice","indexOfEndCityName","indexOf","headers","weatherText","WeatherText","date","LocalObservationDateTime","temp","celsius","value","Temperature","Metric","Value","fahrenheit","Imperial","DailyForecasts","Date","min","Minimum","unit","Unit","max","Maximum","SearchBar","props","getAutoComplete","getCityWeather","cityNames","inputError","styles","borderRadius","backgroundColor","printOptions","width","margin","Autocomplete","onChange","event","freeSolo","disableClearable","options","renderInput","params","TextField","target","size","label","variant","fullWidth","InputProps","ErrorMsg","p","autoComplete_isLoading","s","autoComplete_data","do_getWeatherData","useState","setIsLaoding","setCityNames","setInputError","useEffect","cityNamesList","push","input","validAutoComplete","Card","listType","handleClick","days","tempAverageMainList","Math","ceil","abs","day","getDay","Degrees","tempFavorites","printCard","li","do_changeCity","cityInfo","changeCity","history","cardInfo","List","index","key","ul","useStyles","makeStyles","button","spacing","Location","currentWeatherData","forecastData","toggleFavorite","isCityInFavList","isCelsius","classes","degreesType","degreesValue","errorMsg","isFavorites","inFavorites","forecastList","Container","TopBox","TopBar","InfoMain","InfoImage","src","alt","InfoSub","Info","Button","border","className","startIcon","red","CurrentWeather","img","geoLocation_error","autoComplete_error","currentWeather_isLoading","currentWeather_data","currentWeather_error","forecast_isLoading","forecast_data","forecast_error","do_addToFavorites","addToFavorites","do_removeFromFavorites","cityID","removeFromFavorites","handleFavorite","actionType","favoriteCityKey","HomePage","main","favList","favoritesList","Routes","exact","path","render","component","Favorites","lightTheme","toggleBorder","gradient","darkTheme","dotenv","config","geoLocation_data","appTheme","setTheme","keyCode","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","Wrapper","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c8768f08.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import produce from \"immer\";\r\n\r\nimport {\r\n  FETCHING_GEO_LOCATION,\r\n  FETCHED_GEO_LOCATION,\r\n  FETCHING_GEO_LOCATION_ERROR,\r\n  FETCHING_AUTO_COMPLETE,\r\n  FETCHED_AUTO_COMPLETE,\r\n  FETCHING_AUTO_COMPLETE_ERROR,\r\n  FETCHING_CURRENT_WEATHER,\r\n  FETCHED_CURRENT_WEATHER,\r\n  FETCHING_CURRENT_WEATHER_ERROR,\r\n  FETCHING_FORECAST,\r\n  FETCHED_FORECAST,\r\n  FETCHING_FORECAST_ERROR,\r\n  ADD_TO_FAVORITES,\r\n  REMOVE_FROM_FAVORITES,\r\n  CHANGE_CITY\r\n} from \"./Location.constants\";\r\n\r\nexport const initialState = {\r\n  geoLocation: { data: null, isLoading: false, error: null },\r\n  autoComplete: { data: null, isLoading: false, error: null },\r\n  currentWeather: { data: null, isLoading: false, error: null },\r\n  forecast: { data: null, isLoading: false, error: null },\r\n  favorites: null\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  return produce(state, draft => {\r\n    switch (action.type) {\r\n      // ======================================================\r\n      // -------------------- AUTO COMPLETE -------------------\r\n      // ======================================================\r\n      case FETCHING_GEO_LOCATION:\r\n        draft.geoLocation.isLoading = true;\r\n        draft.geoLocation.error = \"\";\r\n        break;\r\n      case FETCHED_GEO_LOCATION:\r\n        draft.geoLocation.isLoading = false;\r\n        draft.geoLocation.data = action.payload;\r\n        draft.geoLocation.error = \"\";\r\n        break;\r\n      case FETCHING_GEO_LOCATION_ERROR:\r\n        draft.geoLocation.isLoading = false;\r\n        draft.geoLocation.error = action.payload;\r\n        break;\r\n\r\n      // ======================================================\r\n      // -------------------- AUTO COMPLETE -------------------\r\n      // ======================================================\r\n      case FETCHING_AUTO_COMPLETE:\r\n        draft.autoComplete.isLoading = true;\r\n        draft.autoComplete.error = \"\";\r\n        break;\r\n      case FETCHED_AUTO_COMPLETE:\r\n        draft.autoComplete.isLoading = false;\r\n        draft.autoComplete.data = action.payload;\r\n        draft.autoComplete.error = \"\";\r\n        break;\r\n      case FETCHING_AUTO_COMPLETE_ERROR:\r\n        draft.autoComplete.isLoading = false;\r\n        draft.autoComplete.error = action.payload;\r\n        break;\r\n\r\n      // ======================================================\r\n      // ------------------ CURRENT WEATHER -------------------\r\n      // ======================================================\r\n      case FETCHING_CURRENT_WEATHER:\r\n        draft.currentWeather.isLoading = true;\r\n        draft.currentWeather.error = \"\";\r\n        break;\r\n      case FETCHED_CURRENT_WEATHER:\r\n        draft.currentWeather.isLoading = false;\r\n        draft.currentWeather.data = action.payload;\r\n        draft.currentWeather.error = \"\";\r\n        break;\r\n      case FETCHING_CURRENT_WEATHER_ERROR:\r\n        draft.currentWeather.isLoading = false;\r\n        draft.currentWeather.error = action.payload;\r\n        break;\r\n\r\n      // ======================================================\r\n      // ---------------------- FORECAST ----------------------\r\n      // ======================================================\r\n      case FETCHING_FORECAST:\r\n        draft.forecast.isLoading = true;\r\n        draft.forecast.error = \"\";\r\n        break;\r\n      case FETCHED_FORECAST:\r\n        draft.forecast.isLoading = false;\r\n        draft.forecast.data = action.payload;\r\n        draft.forecast.error = \"\";\r\n        break;\r\n      case FETCHING_FORECAST_ERROR:\r\n        draft.forecast.isLoading = false;\r\n        draft.forecast.error = action.payload;\r\n        break;\r\n\r\n      // ======================================================\r\n      // ---------------------- FAVORITES ---------------------\r\n      // ======================================================\r\n      case ADD_TO_FAVORITES:\r\n        draft.favorites = {\r\n          ...draft.favorites,\r\n          [action.payload.id]: action.payload\r\n        };\r\n        break;\r\n      case REMOVE_FROM_FAVORITES:\r\n        const newFavList = { ...draft.favorites };\r\n        delete newFavList[action.payload];\r\n        draft.favorites = newFavList;\r\n        break;\r\n\r\n      // ======================================================\r\n      // -------------------- CHANGE CITY ---------------------\r\n      // ======================================================\r\n      case CHANGE_CITY:\r\n        draft.currentWeather.data = action.payload.currentWeather; \r\n        draft.forecast.data = action.payload.forecast;\r\n        break;\r\n     \r\n\r\n      default:\r\n        return state;\r\n    }\r\n  });\r\n};\r\n","import produce from \"immer\";\r\n\r\nimport { CHANGE_THEME } from \"./App.constants\";\r\n\r\nexport const initialState = {\r\n  theme: true\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  return produce(state, draft => {\r\n    switch (action.type) {\r\n      // ======================================================\r\n      // ------------------------ THEME -----------------------\r\n      // ======================================================\r\n      case CHANGE_THEME:\r\n        draft.theme = !draft.theme;\r\n        break;\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  });\r\n};\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport locationReducer from \"../containers/Location/Location.reducer\";\r\nimport appReducer from \"../App/App.reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  location: locationReducer,\r\n  app: appReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","export const FETCHING_GEO_LOCATION = \"FETCHING_GEO_LOCATION\";\r\nexport const FETCHED_GEO_LOCATION = \"FETCHED_GEO_LOCATION\";\r\nexport const FETCHING_GEO_LOCATION_ERROR = \"FETCHING_GEO_LOCATION_ERROR\";\r\n\r\nexport const FETCHING_AUTO_COMPLETE = \"FETCHING_AUTO_COMPLETE\";\r\nexport const FETCHED_AUTO_COMPLETE = \"FETCHED_AUTO_COMPLETE\";\r\nexport const FETCHING_AUTO_COMPLETE_ERROR = \"FETCHING_AUTO_COMPLETE_ERROR\";\r\n\r\nexport const FETCHING_CURRENT_WEATHER = \"FETCHING_CURRENT_WEATHER\";\r\nexport const FETCHED_CURRENT_WEATHER = \"FETCHED_CURRENT_WEATHER\";\r\nexport const FETCHING_CURRENT_WEATHER_ERROR = \"FETCHING_CURRENT_WEATHER_ERROR\";\r\n\r\n\r\nexport const FETCHING_FORECAST = \"FETCHING_FORECAST\";\r\nexport const FETCHED_FORECAST = \"FETCHED_FORECAST\";\r\nexport const FETCHING_FORECAST_ERROR = \"FETCHING_FORECAST_ERROR\";\r\n\r\nexport const ADD_TO_FAVORITES = \"ADD_TO_FAVORITES\";\r\nexport const REMOVE_FROM_FAVORITES = \"REMOVE_FROM_FAVORITES\";\r\n\r\nexport const CHANGE_CITY = \"CHANGE_CITY\";\r\n","export const CHANGE_THEME = \"CHANGE_THEME\";\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { save_state_locally, get_local_state } from \"../middleware/local.saver\";\r\nimport rootReducers from \"./root.reducer\";\r\n\r\nconst middleware = [thunk, save_state_locally];\r\n\r\nconst preloadedState = get_local_state();\r\n\r\nconst store = createStore(\r\n  rootReducers,\r\n  preloadedState,\r\n  applyMiddleware(...middleware)\r\n);\r\n\r\nexport default store;\r\n","export const save_state_locally = store => next => action => {\r\n    next(action)\r\n    localStorage.setItem(\"weatherApp\", JSON.stringify(store.getState()) )\r\n    return \r\n} \r\n  \r\nexport const get_local_state = ()=> JSON.parse(localStorage.getItem(\"weatherApp\")) || {}","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: inherit;\r\n  text-decoration: none;\r\n  list-style: none;\r\n}\r\nhtml {\r\n  font-size: 62.5%;\r\n}\r\nbody {\r\n  box-sizing: border-box;\r\n  font-family: 'Varela Round', serif\r\n    sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n}\r\nh1,h2,h3, div {\r\n  color: whitesmoke;\r\n  font-family: \"verdana\";\r\n}\r\na, button {\r\n  cursor: pointer;\r\n}  \r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { FavoriteSharp, Home, ColorLens } from \"@material-ui/icons\";\r\nimport { deepPurple } from \"@material-ui/core/colors\";\r\nimport { changeTheme } from \"../../App/App.actions\";\r\n\r\nconst Header = ({ do_changeTheme }) => {\r\n  return (\r\n    <S.Header>\r\n      <S.Title>Herolo Weather Task</S.Title>\r\n      <S.ButtonsBox>\r\n        <Link to=\"/\">\r\n          <Home\r\n            style={{ color: deepPurple[50], fontSize: 40, marginLeft: 20 }}\r\n          />\r\n        </Link>\r\n        <Link to=\"/favorites\">\r\n          <FavoriteSharp\r\n            style={{ color: deepPurple[50], fontSize: 40, marginLeft: 20 }}\r\n          />\r\n        </Link>\r\n        <ColorLens\r\n          onClick={() => do_changeTheme()}\r\n          style={{ color: deepPurple[50], fontSize: 40, marginLeft: 20, cursor: \"pointer\" }}\r\n        />\r\n      </S.ButtonsBox>\r\n    </S.Header>\r\n  );\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    do_changeTheme: () => dispatch(changeTheme())\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Header);\r\n\r\nconst S = {};\r\n\r\nS.Header = styled.header`\r\n  width: 100%;\r\n  height: 10%;\r\n  padding: 1rem 2rem;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  border-bottom: lightgray 1px solid;\r\n`;\r\nS.Title = styled.h1`\r\n  font-size: 2.6rem;\r\n  font-family: \"Lato\";\r\n  line-height: 1.3;\r\n  font-weight: 300;\r\n`;\r\nS.ButtonsBox = styled.div``;\r\n","import { CHANGE_THEME } from \"./App.constants\";\r\n\r\nexport const changeTheme = () => ({\r\n  type: CHANGE_THEME,\r\n  payload: \"changeTheme\"\r\n});\r\n","import { createSelector } from \"reselect\";\r\n\r\n// ======================================================\r\n// -------------------- LOADING DATA --------------------\r\n// ======================================================\r\nexport const selectorLoadingData = createSelector(\r\n  (state, type) => state.location[type].isLoading,\r\n  isLoading => isLoading\r\n);\r\n\r\n// ======================================================\r\n// -------------------- RECEIVING DATA ------------------\r\n// ======================================================\r\nexport const selectorReceivingData = createSelector(\r\n  (state, type) => state.location[type].data,\r\n  data => data\r\n);\r\n\r\n// ======================================================\r\n// ------------------- FETCHING ERROR -------------------\r\n// ======================================================\r\nexport const selectorFetchingError = createSelector(\r\n  (state, type) => state.location[type].error,\r\n  error => error\r\n);\r\n\r\n// ======================================================\r\n// ---------------------- FAVORITES ---------------------\r\n// ======================================================\r\nexport const selectorFavorites = createSelector(\r\n  (state) => state.location.favorites,\r\n  favorites => favorites\r\n);\r\n\r\n// ======================================================\r\n// ----------------------- THEME ------------------------\r\n// ======================================================\r\nexport const selectorAppTheme = createSelector(\r\n  (state) => state.app.theme,\r\n  theme => theme\r\n);\r\n","const api = {\r\n  cors: \"https://cors-anywhere.herokuapp.com/\",\r\n  geoLocation: lat_lon =>\r\n    `${api.cors}http://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=${process.env.REACT_APP_API_KEY}&q=${lat_lon}`,\r\n  autocomplete: searchValue =>\r\n    `${api.cors}http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${process.env.REACT_APP_API_KEY}&q=${searchValue}&language=en-us`,\r\n  current: locationKey =>\r\n    `${api.cors}http://dataservice.accuweather.com/currentconditions/v1/${locationKey}?apikey=${process.env.REACT_APP_API_KEY}&language=en-us&details=false`,\r\n  forecast: locationKey =>\r\n    `${api.cors}http://dataservice.accuweather.com/forecasts/v1/daily/5day/${locationKey}?apikey=${process.env.REACT_APP_API_KEY}&language=en-us&details=false&metric=false`\r\n};\r\n\r\nexport default api;\r\n","const title_case = str => {\r\n    str = str.toLowerCase().replace(/(^|\\s)\\S/g, L => L.toUpperCase());\r\n    return str.replace(\"-\", \" \")\r\n};\r\n\r\nexport default title_case;\r\n","import api from \"../../utils/config/api\";\r\nimport axios from \"axios\";\r\nimport title_case from \"../../utils/helpers/title_case\";\r\nimport {\r\n  FETCHING_GEO_LOCATION,\r\n  FETCHED_GEO_LOCATION,\r\n  FETCHING_GEO_LOCATION_ERROR,\r\n  FETCHING_AUTO_COMPLETE,\r\n  FETCHED_AUTO_COMPLETE,\r\n  FETCHING_AUTO_COMPLETE_ERROR,\r\n  FETCHING_CURRENT_WEATHER,\r\n  FETCHED_CURRENT_WEATHER,\r\n  FETCHING_CURRENT_WEATHER_ERROR,\r\n  FETCHING_FORECAST,\r\n  FETCHED_FORECAST,\r\n  FETCHING_FORECAST_ERROR,\r\n  ADD_TO_FAVORITES,\r\n  REMOVE_FROM_FAVORITES\r\n} from \"./Location.constants\";\r\n\r\nexport const addToFavorites = cityInfo => {\r\n  const newCityInfo = {\r\n    id: cityInfo.currentWeatherData.id,\r\n    forecast: cityInfo.forecastList,\r\n    currentWeather: cityInfo.currentWeatherData\r\n  };\r\n\r\n  return {\r\n    type: ADD_TO_FAVORITES,\r\n    payload: newCityInfo\r\n  };\r\n};\r\n\r\nexport const removeFromFavorites = cityID => ({\r\n  type: REMOVE_FROM_FAVORITES,\r\n  payload: cityID\r\n});\r\n\r\nexport const getWeatherData = (query, type) => {\r\n  return function(dispatch) {\r\n    const fetch_details = getFetchingDetails(query, type);\r\n\r\n    dispatch({ type: fetch_details.FETCHING });\r\n\r\n    return axios\r\n      .get(fetch_details.API_URL)\r\n      .then(response => {\r\n        // Success\r\n        const payload = getSortedData(response, type);\r\n\r\n        dispatch({ type: fetch_details.FETCHED, payload });\r\n      })\r\n      .catch(error => {\r\n        // Error\r\n        dispatch({\r\n          type: fetch_details.ERROR,\r\n          payload: { msg: error.message, type }\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nconst getFetchingDetails = (query, type) => {\r\n  const helper = {\r\n    API_URL: \"\",\r\n    FETCHING: \"\",\r\n    FETCHED: \"\",\r\n    ERROR: \"\"\r\n  };\r\n\r\n  switch (type) {\r\n    case \"geoLocation\":\r\n      helper.API_URL = api.geoLocation(query);\r\n      helper.FETCHING = FETCHING_GEO_LOCATION;\r\n      helper.FETCHED = FETCHED_GEO_LOCATION;\r\n      helper.ERROR = FETCHING_GEO_LOCATION_ERROR;\r\n      break;\r\n    case \"autoComplete\":\r\n      helper.API_URL = api.autocomplete(query);\r\n      helper.FETCHING = FETCHING_AUTO_COMPLETE;\r\n      helper.FETCHED = FETCHED_AUTO_COMPLETE;\r\n      helper.ERROR = FETCHING_AUTO_COMPLETE_ERROR;\r\n      break;\r\n    case \"current\":\r\n      helper.API_URL = api.current(query);\r\n      helper.FETCHING = FETCHING_CURRENT_WEATHER;\r\n      helper.FETCHED = FETCHED_CURRENT_WEATHER;\r\n      helper.ERROR = FETCHING_CURRENT_WEATHER_ERROR;\r\n      break;\r\n    case \"forecast\":\r\n      helper.API_URL = api.forecast(query);\r\n      helper.FETCHING = FETCHING_FORECAST;\r\n      helper.FETCHED = FETCHED_FORECAST;\r\n      helper.ERROR = FETCHING_FORECAST_ERROR;\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return helper;\r\n};\r\n\r\nconst getSortedData = (response, type) => {\r\n  switch (type) {\r\n    case \"geoLocation\":\r\n      return response.data.Key;\r\n\r\n    case \"autoComplete\":\r\n      const helper = {};\r\n      response.data.map(item => {\r\n        helper[item.LocalizedName] = {\r\n          id: item.Key,\r\n          cityName: item.LocalizedName\r\n        };\r\n      });\r\n      return helper;\r\n\r\n    case \"current\":\r\n      const iconID = response.data[0].WeatherIcon;\r\n      const weatherIconID =\r\n        iconID.toString().length > 1 ? iconID : `0${iconID}`;\r\n\r\n      let cityName = response.data[0].Link.slice(33);\r\n      const indexOfEndCityName = cityName.indexOf(\"/\");\r\n\r\n      cityName = cityName.slice(0, indexOfEndCityName);\r\n      cityName = title_case(cityName);\r\n\r\n      return {\r\n        cityName,\r\n        weatherIconID,\r\n        id: response.headers[\"x-request-id\"],\r\n        weatherText: response.data[0].WeatherText,\r\n        date: response.data[0].LocalObservationDateTime,\r\n        temp: {\r\n          celsius: {\r\n            value: response.data[0].Temperature.Metric.Value\r\n          },\r\n          fahrenheit: {\r\n            value: response.data[0].Temperature.Imperial.Value\r\n          }\r\n        }\r\n      };\r\n\r\n    case \"forecast\":\r\n      return response.data.DailyForecasts.map(item => {\r\n        return {\r\n          id: response.headers[\"x-request-id\"],\r\n          date: item.Date,\r\n          temp: {\r\n            min: {\r\n              value: item.Temperature.Minimum.Value,\r\n              unit: item.Temperature.Minimum.Unit\r\n            },\r\n            max: {\r\n              value: item.Temperature.Maximum.Value,\r\n              unit: item.Temperature.Maximum.Unit\r\n            }\r\n          }\r\n        };\r\n      });\r\n\r\n    default:\r\n      break;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\nconst SearchBar = props => {\r\n  const { getAutoComplete, getCityWeather, cityNames, inputError } = props;\r\n  const styles = {\r\n    borderRadius: \"10px\",\r\n    backgroundColor: \"white\"\r\n  };\r\n\r\n  const printOptions = cityNames.length > 0 ? cityNames : [];\r\n\r\n  return (\r\n    <div style={{ width: \"90%\", margin: \"10px auto\" }}>\r\n      <Autocomplete\r\n        onChange={(event, value) => getCityWeather(value)}\r\n        freeSolo\r\n        disableClearable\r\n        options={printOptions}\r\n        renderInput={params => (\r\n          <TextField\r\n            onChange={event => getAutoComplete(event.target.value)}\r\n            style={styles}\r\n            size=\"medium\"\r\n            {...params}\r\n            label=\"Search input\"\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            InputProps={{ ...params.InputProps, type: \"search\" }}\r\n          />\r\n        )}\r\n      />\r\n      <S.ErrorMsg>{inputError}</S.ErrorMsg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n\r\nconst S = {};\r\n\r\nS.ErrorMsg = styled.p`\r\n  color: red;\r\n  font-size: 1.5rem;\r\n  font-family: \"Lato\";\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as s from \"../../store/selectors\";\r\nimport { getWeatherData } from \"../../containers/Location/Location.actions\";\r\nimport SearchBar from \"../../components/SearchBar/SearchBar\";\r\n\r\nconst SearchBarContainer = props => {\r\n  const [isLoading, setIsLaoding] = useState(false);\r\n  const [cityNames, setCityNames] = useState([]);\r\n  const [inputError, setInputError] = useState(\"\");\r\n\r\n  const {\r\n    do_getWeatherData,\r\n    autoComplete_isLoading,\r\n    autoComplete_data\r\n  } = props;\r\n\r\n  useEffect(() => {\r\n    setIsLaoding(autoComplete_isLoading);\r\n  }, [autoComplete_isLoading]);\r\n\r\n  useEffect(() => {\r\n    const cityNamesList = [];\r\n\r\n    if (autoComplete_data !== null) {\r\n      for (const cityName in autoComplete_data) {\r\n        cityNamesList.push(cityName);\r\n      }\r\n    }\r\n\r\n    if (cityNamesList.length) {\r\n      setCityNames(cityNamesList);\r\n    }\r\n  }, [autoComplete_data]);\r\n\r\n  const validAutoComplete = input => {\r\n    var letters = /^[A-Za-z]+$/;\r\n    if (input.match(letters)) {\r\n      return do_getWeatherData(input, \"autoComplete\");\r\n    } else {\r\n      return setInputError(\"Please input alphabet characters only\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SearchBar\r\n      getAutoComplete={input => validAutoComplete(input)}\r\n      getCityWeather={cityName => {\r\n        do_getWeatherData(autoComplete_data[cityName].id, \"current\");\r\n        do_getWeatherData(autoComplete_data[cityName].id, \"forecast\");\r\n      }}\r\n      isLoading={isLoading}\r\n      cityNames={cityNames}\r\n      inputError={inputError}\r\n    />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    autoComplete_isLoading: s.selectorLoadingData(state, \"autoComplete\"),\r\n    autoComplete_data: s.selectorReceivingData(state, \"autoComplete\")\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    do_getWeatherData: (query, type) => dispatch(getWeatherData(query, type))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBarContainer);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Card = ({ data, listType, handleClick }) => {\r\n  const days = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\"\r\n  ];\r\n\r\n  const printCard = () => {\r\n    switch (listType) {\r\n      case \"mainList\":\r\n        const tempAverageMainList = Math.ceil(\r\n          Math.abs(data.temp.max.value - data.temp.min.value) / 2\r\n        );\r\n        const day = new Date(data.date).getDay();\r\n\r\n        return (\r\n          <S.Card listType={listType}>\r\n            <S.Title>{days[day]}</S.Title>\r\n            <S.Degrees>\r\n              {tempAverageMainList} {\"F\"}\r\n            </S.Degrees>\r\n          </S.Card>\r\n        );\r\n\r\n      case \"favorites\":\r\n        // const tempFavorites = data.degrees[degreesType].value\r\n\r\n        const tempFavorites = data.currentWeather.temp[\"celsius\"].value;\r\n\r\n        return (\r\n          <S.Card onClick={() => handleClick(data)} listType={listType}>\r\n            <S.Title>{data.currentWeather.cityName}</S.Title>\r\n            <S.Degrees>\r\n              {tempFavorites} {\"F\"}\r\n            </S.Degrees>\r\n            <S.Title>{data.currentWeather.weatherText}</S.Title>\r\n          </S.Card>\r\n        );\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return printCard();\r\n};\r\n\r\nexport default Card;\r\n\r\nconst S = {};\r\n\r\nS.Card = styled.li`\r\n  display: flex;\r\n  flex-basis: calc(20% - 12px);\r\n  flex-direction: column;\r\n  height: ${props => (props.listType === \"mainList\" ? \"100%\" : \"40%\")};\r\n  cursor: ${props => (props.listType === \"mainList\" ? \"auto\" : \"pointer\")};\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 5px;\r\n  background-color: rgba(255, 255, 255, 0.2);\r\n`;\r\n\r\nS.Title = styled.h1`\r\n  font-size: 2.5rem;\r\n  font-family: \"Lato\";\r\n  line-height: 1.3;\r\n  font-weight: 300;\r\n  margin-bottom: 5px;\r\n\r\n  @media (max-width: 762px) {\r\n    font-size: 1.5rem;\r\n  }\r\n`;\r\nS.Degrees = styled.p`\r\n  font-size: 2rem;\r\n  font-family: \"Lato\";\r\n  line-height: 1.3;\r\n  font-weight: 300;\r\n\r\n  @media (max-width: 762px) {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport Card from \"../../components/Card/Card\";\r\nimport { changeCity } from \"./Card.actions\";\r\n\r\nconst CardContainer = ({ do_changeCity, data, listType, history }) => {\r\n  const handleClick = cardInfo => {\r\n    do_changeCity(cardInfo);\r\n    history.push(\"/weather_app\");\r\n  };\r\n  \r\n  return (\r\n    <Card\r\n      data={data}\r\n      listType={listType}\r\n      handleClick={cardInfo => handleClick(cardInfo)}\r\n    />\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    do_changeCity: cityInfo => dispatch(changeCity(cityInfo))\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(CardContainer);\r\n\r\nconst S = {};\r\n\r\nS.Card = styled.li`\r\n  display: flex;\r\n  flex-basis: calc(20% - 12px);\r\n  flex-direction: column;\r\n  height: ${props => (props.listType === \"mainList\" ? \"100%\" : \"40%\")};\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 5px;\r\n  background-color: rgba(255, 255, 255, 0.2);\r\n`;\r\n\r\nS.Title = styled.h1`\r\n  font-size: 2.5rem;\r\n  font-family: \"Lato\";\r\n  line-height: 1.3;\r\n  font-weight: 300;\r\n  margin-bottom: 5px;\r\n`;\r\nS.Degrees = styled.p`\r\n  font-size: 2rem;\r\n  font-family: \"Lato\";\r\n  line-height: 1.3;\r\n  font-weight: 300;\r\n`;\r\n","import { CHANGE_CITY } from \"../Location/Location.constants\";\r\n\r\nexport const changeCity = cityInfo => {\r\n  return {\r\n    type: CHANGE_CITY,\r\n    payload: cityInfo\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport CardContainer from \"../../containers/Card/CardContainer\";\r\n\r\nconst List = ({ listType, data, history }) => {\r\n  return (\r\n    <S.List listType={listType}>\r\n      {data.length > 0 &&\r\n        data.map((item, index) => (\r\n          <CardContainer\r\n            key={index}\r\n            data={item}\r\n            listType={listType}\r\n            index={index}\r\n            history={history}\r\n          />\r\n        ))}\r\n    </S.List>\r\n  );\r\n};\r\n\r\nexport default List;\r\n\r\nconst S = {};\r\n\r\nS.List = styled.ul`\r\n  display: flex;\r\n  align-items: center;\r\n  flex-wrap: ${props => (props.listType === \"mainList\" ? \"no-wrap\" : \"wrap\")};\r\n  align-items: ${props =>\r\n    props.listType === \"mainList\" ? \"center\" : \"flex-start\"};\r\n  height: ${props => (props.listType === \"mainList\" ? \"37%\" : \"100%\")};\r\n  width: 90%;\r\n  margin: 0 auto;\r\n  overflow-y: ${props =>\r\n    props.listType === \"mainList\" ? \"visible\" : \"scroll\"};\r\n  box-shadow: ${props =>\r\n    props.listType === \"mainList\"\r\n      ? \"none\"\r\n      : \" 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\"};\r\n\r\n  &::-webkit-scrollbar {\r\n    width: 15px;\r\n    height: 8px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: orange;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport List from \"../List/List\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { FavoriteSharp } from \"@material-ui/icons\";\r\nimport { red, deepPurple } from \"@material-ui/core/colors\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  button: {\r\n    margin: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nconst Location = ({\r\n  currentWeatherData,\r\n  forecastData,\r\n  error,\r\n  toggleFavorite,\r\n  isCityInFavList,\r\n  isCelsius = true\r\n}) => {\r\n  const classes = useStyles();\r\n  let cityName = \"\";\r\n  let weatherText = \"\";\r\n  let celsius = \"\";\r\n  let fahrenheit = \"\";\r\n  let degreesType = \"\";\r\n  let degreesValue = \"\";\r\n  let weatherIconID = \"\";\r\n  let errorMsg = \"\";\r\n  let isFavorites = false;\r\n  let inFavorites = false;\r\n  let forecastList = [];\r\n\r\n  if (forecastData) {\r\n    forecastList = forecastData;\r\n  }\r\n\r\n  if (currentWeatherData) {\r\n    cityName = currentWeatherData.cityName;\r\n    weatherIconID = currentWeatherData.weatherIconID;\r\n    weatherText = currentWeatherData.weatherText;\r\n    celsius = Math.ceil(currentWeatherData.temp.celsius.value);\r\n    fahrenheit = Math.ceil(currentWeatherData.temp.fahrenheit.value);\r\n    degreesType = isCelsius ? \"C\" : \"F\";\r\n    degreesValue = isCelsius ? celsius : fahrenheit;\r\n    inFavorites = isCityInFavList({ currentWeatherData, forecastList });\r\n    isFavorites =\r\n      inFavorites === true ? \"REMOVE FROM FAVORITES\" : \"ADD TO FAVORITES\";\r\n  }\r\n\r\n  if (error) {\r\n    errorMsg = `${error.type}: ${error.msg}`;\r\n  }\r\n\r\n  return (\r\n    <S.Container>\r\n      {currentWeatherData && (\r\n        <S.TopBox>\r\n          <S.TopBar>\r\n            <S.InfoMain>\r\n              <S.InfoImage\r\n                src={`https://developer.accuweather.com/sites/default/files/${weatherIconID}-s.png`}\r\n                alt=\"degrees\"\r\n              />\r\n              <S.InfoSub>\r\n                <S.Info>{cityName}</S.Info>\r\n                <S.Info>\r\n                  {degreesValue} {degreesType}\r\n                </S.Info>\r\n              </S.InfoSub>\r\n            </S.InfoMain>\r\n            <Button\r\n              style={{\r\n                color: deepPurple[50],\r\n                backgroundColor: \"transparent\",\r\n                border: \"1px solid lightgrey\",\r\n                fontSize: 10\r\n              }}\r\n              variant=\"contained\"\r\n              className={classes.button}\r\n              onClick={() =>\r\n                toggleFavorite({ currentWeatherData, forecastList })\r\n              }\r\n              startIcon={\r\n                <FavoriteSharp\r\n                  style={{\r\n                    color: inFavorites === true ? red[400] : deepPurple[50],\r\n                    fontSize: 30\r\n                  }}\r\n                />\r\n              }\r\n            >\r\n              {isFavorites}\r\n            </Button>\r\n          </S.TopBar>\r\n          <S.CurrentWeather>\r\n            {<S.Title>{weatherText}</S.Title>}\r\n          </S.CurrentWeather>\r\n        </S.TopBox>\r\n      )}\r\n\r\n      <S.ErrorMsg>{errorMsg}</S.ErrorMsg>\r\n      \r\n      <List data={forecastList} listType=\"mainList\" />\r\n    </S.Container>\r\n  );\r\n};\r\n\r\nexport default Location;\r\n\r\nconst S = {};\r\n\r\nS.Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nS.TopBox = styled.div`\r\n  background-color: rgba(255, 255, 255, 0.2);\r\n  height: 60%;\r\n  width: 90%;\r\n  margin: 0 auto;\r\n  padding: 10px;\r\n`;\r\n\r\nS.TopBar = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nS.InfoMain = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-right: 10px;\r\n`;\r\nS.InfoSub = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0 15px;\r\n`;\r\n\r\nS.InfoImage = styled.img`\r\n  height: 100%;\r\n`;\r\n\r\nS.Info = styled.p`\r\n  flex-basis: 50%;\r\n  font-size: 2rem;\r\n  text-align: center;\r\n\r\n  @media (max-width: 762px) {\r\n    font-size: 1.5rem;\r\n  }\r\n`;\r\n\r\nS.CurrentWeather = styled.div`\r\n  font-size: 4rem;\r\n  font-family: \"Lato\";\r\n  line-height: 1.3;\r\n  font-weight: 300;\r\n  text-align: center;\r\n  margin-top: 2rem;\r\n\r\n\r\n  @media (max-width: 762px) {\r\n    font-size: 2rem;\r\n  }\r\n`;\r\n\r\nS.Title = styled(S.CurrentWeather)`\r\n`;\r\n\r\nS.ErrorMsg = styled(S.CurrentWeather)`\r\n  color: red;\r\n`;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Location from \"../../components/Location/Location\";\r\nimport * as s from \"../../store/selectors\";\r\nimport {\r\n  addToFavorites,\r\n  removeFromFavorites\r\n} from \"../Location/Location.actions\";\r\n\r\nconst LocationContainer = props => {\r\n  const {\r\n    currentWeather_data,\r\n    forecast_data,\r\n    autoComplete_error,\r\n    currentWeather_error,\r\n    forecast_error,\r\n    favorites,\r\n    do_removeFromFavorites,\r\n    do_addToFavorites,\r\n    geoLocation_error\r\n  } = props;\r\n\r\n  const handleFavorite = (cityInfo, actionType) => {\r\n    const inFavorites = isCityInFavList(cityInfo);\r\n\r\n    if (inFavorites) {\r\n      if (actionType === \"toggleButton\") return true;\r\n\r\n      return do_removeFromFavorites(cityInfo.currentWeatherData.id);\r\n    }\r\n\r\n    if (actionType === \"toggleEditList\") return do_addToFavorites(cityInfo);\r\n  };\r\n\r\n  const isCityInFavList = cityInfo => {\r\n    if (favorites) {\r\n      for (const favoriteCityKey in favorites) {\r\n        if (favoriteCityKey === cityInfo.currentWeatherData.id) return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <Location\r\n      currentWeatherData={currentWeather_data}\r\n      forecastData={forecast_data}\r\n      isCityInFavList={cityInfo => handleFavorite(cityInfo, \"toggleButton\")}\r\n      toggleFavorite={cityInfo => handleFavorite(cityInfo, \"toggleEditList\")}\r\n      error={\r\n        autoComplete_error ||\r\n        currentWeather_error ||\r\n        forecast_error ||\r\n        geoLocation_error\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    // geoLocation\r\n    geoLocation_error: s.selectorFetchingError(state, \"geoLocation\"),\r\n    // autoComplete\r\n    autoComplete_error: s.selectorFetchingError(state, \"autoComplete\"),\r\n    // currentWeather\r\n    currentWeather_isLoading: s.selectorLoadingData(state, \"currentWeather\"),\r\n    currentWeather_data: s.selectorReceivingData(state, \"currentWeather\"),\r\n    currentWeather_error: s.selectorFetchingError(state, \"currentWeather\"),\r\n    // forecast\r\n    forecast_isLoading: s.selectorLoadingData(state, \"forecast\"),\r\n    forecast_data: s.selectorReceivingData(state, \"forecast\"),\r\n    forecast_error: s.selectorFetchingError(state, \"forecast\"),\r\n    // favorites\r\n    favorites: s.selectorFavorites(state)\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    do_addToFavorites: cityInfo => dispatch(addToFavorites(cityInfo)),\r\n    do_removeFromFavorites: cityID => dispatch(removeFromFavorites(cityID))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LocationContainer);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport SearchBarContainer from \"../../containers/SearchBar/SearchBarContainer\";\r\nimport LocationContainer from \"../../containers/Location/LocationContainer\";\r\n\r\nconst HomePage = () => {\r\n  return (\r\n    <S.HomePage>\r\n      <SearchBarContainer />\r\n      <LocationContainer />\r\n    </S.HomePage>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n\r\nconst S = {};\r\n\r\nS.HomePage = styled.main`\r\n  width: 90%;\r\n  height: 80%;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  /* align-items: center; */\r\n  /* border: lightgray 1px solid; */\r\n`;\r\n\r\nS.Info = styled.main`\r\n  width: 90%;\r\n  height: 80%;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  justify-content: center;\r\n  /* align-items: center; */\r\n  /* border: lightgray 1px solid; */\r\n`;\r\nS.Info = styled.main`\r\n  width: 90%;\r\n  height: 80%;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  justify-content: center;\r\n  /* align-items: center; */\r\n  /* border: lightgray 1px solid; */\r\n`;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport List from \"../List/List\";\r\nimport * as s from \"../../store/selectors\";\r\n\r\nconst Favorites = ({ favorites, history}) => {\r\n  const favoritesList = () => {\r\n    const favList = [];\r\n\r\n    if (favorites !== null) {\r\n      for (const favoriteCityKey in favorites) {\r\n        favList.push(favorites[favoriteCityKey]);\r\n      }\r\n    }\r\n\r\n    return favList;\r\n  };\r\n  return <List history={history} data={favoritesList()} listType=\"favorites\" />;\r\n};\r\n\r\nconst mapStateToProps = state => ({ favorites: s.selectorFavorites(state) });\r\n\r\nexport default connect(mapStateToProps)(Favorites);\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport HomePage from \"../components/HomePage/HomePage\";\r\nimport Favorites from \"../components/Favorites/Favorites\";\r\n\r\n\r\nconst Routes = () => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/weather_app/\" render={() => <HomePage />} />\r\n      <Route exact path=\"/weather_app/favorites\" component={Favorites} />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Routes;","export const lightTheme = {\r\n  body: \"#95a6b8\",\r\n  text: \"black\",\r\n  toggleBorder: \"#FFF\",\r\n  gradient: \"linear-gradient(#39598A, #79D7ED)\"\r\n};\r\n\r\nexport const darkTheme = {\r\n  body: \"#0f0c29\",\r\n  text: \"#FAFAFA\",\r\n  toggleBorder: \"#6B8096\",\r\n  gradient: \"linear-gradient(to right, #24243e, #302b63, #0f0c29)\"\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { connect } from \"react-redux\";\r\nimport GlobalStyle from \"../styles/global.styles\";\r\nimport dotenv from \"dotenv\";\r\nimport Header from \"../components/Header/Header\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport Routes from \"../routes/Routes\";\r\nimport { getWeatherData } from \"../containers/Location/Location.actions\";\r\nimport * as s from \"../store/selectors\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { lightTheme, darkTheme } from \"../styles/theme\";\r\n\r\ndotenv.config();\r\n\r\nfunction App({ do_getWeatherData, geoLocation_data, appTheme }) {\r\n  const [theme, setTheme] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const keyCode = geoLocation_data;\r\n\r\n    do_getWeatherData(keyCode, \"current\");\r\n    do_getWeatherData(keyCode, \"forecast\");\r\n  }, [geoLocation_data]);\r\n\r\n  useEffect(() => {\r\n    setTheme(appTheme);\r\n  }, [appTheme]);\r\n\r\n  if (navigator.geolocation) {\r\n    navigator.geolocation.getCurrentPosition(function(position) {\r\n      const lat_lon = `${position.coords.latitude},${position.coords.longitude}`;\r\n\r\n      do_getWeatherData(lat_lon, \"geoLocation\");\r\n    });\r\n  } else {\r\n    do_getWeatherData(\"215854\", \"current\");\r\n    do_getWeatherData(\"215854\", \"forecast\");\r\n  }\r\n\r\n  return (\r\n    <ThemeProvider theme={theme ? darkTheme : lightTheme}>\r\n      <Wrapper>\r\n        <GlobalStyle />\r\n\r\n        <Router>\r\n          <Header />\r\n          <Routes />\r\n        </Router>\r\n      </Wrapper>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    // autoComplete\r\n    geoLocation_data: s.selectorReceivingData(state, \"geoLocation\"),\r\n    appTheme: s.selectorAppTheme(state)\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    do_getWeatherData: (query, type) => dispatch(getWeatherData(query, type))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n`;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store/store\";\r\nimport App from \"./App/App\";\r\n\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}